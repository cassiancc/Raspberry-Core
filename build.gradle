plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'org.moddedmc.wiki.toolkit' version '0.2.7'
    id 'net.neoforged.moddev.legacyforge' version '2.0.78'
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

version = project.mod_version + "+" + minecraft_version
group = mod_group_id

repositories {
    mavenLocal()
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        url = "https://maven.shedaniel.me/"
        name = "shedaniel - cloth config"
    }
    maven {
        url = "https://maven.teamabnormals.com/"
    }
    exclusiveContent {
        forRepository {
            maven {
                url "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = "https://maven.tterrag.com/"
        name = "Create"
    }
    // GeckoLib
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
    // Parchment Mappings
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    // Player Animator
    maven {
        name = "KosmX's maven"
        url = 'https://maven.kosmx.dev/'
    }
    // PalladiumCore
    maven {
        url 'https://repo.repsy.io/mvn/lucraft/threetag'
    }
    maven {
        url "https://maven.latvian.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.latvian.apps"
        }
    }

    maven {
        url 'https://jitpack.io'
        content {
            includeGroup "com.github.rtyley"
        }
    }
    flatDir {
        dirs 'libs'
    }
    maven { url = "https://maven.bawnorton.com/releases" } // MixinSquared
    maven { url = "https://maven.enjarai.dev/mirrors" } // MixinSquared Mirror
    maven { // Curios
        name = "Illusive Soulworks maven"
        url = "https://maven.theillusivec4.top/"
    }
}

base {
    archivesName = mod_id
}

// Mojang ships Java 21 to end users in 1.20.1, so mods should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

legacyForge {
    // Specify the version of MinecraftForge to use.
    version = project.minecraft_version + '-' + project.forge_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
     accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime' and a deobfuscating one called 'modLocalRuntime'
// These configurations should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}
obfuscation {
    createRemappingConfiguration(configurations.localRuntime)
}

dependencies {
    // If you wish to declare dependencies against mods, make sure to use the 'mod*' configurations so that they're remapped.
	// See https://github.com/neoforged/ModDevGradle/blob/main/LEGACY.md#remapping-mod-dependencies for more information.

    // Cloth Config
    modApi("me.shedaniel.cloth:cloth-config-forge:$cloth_config_version")

    // Abnormals
    modCompileOnly("maven.modrinth:environmental:$environmental_version")
    modCompileOnly("maven.modrinth:caverns-and-chasms:$caverns_and_chasms_version")
    modCompileOnly("maven.modrinth:upgrade-aquatic:$upgrade_aquatic_version")
    modCompileOnly("maven.modrinth:neapolitan:$neapolitan_version")
    modImplementation("com.teamabnormals:blueprint:$blueprint_version")
    modCompileOnly("maven.modrinth:endergetic:$endergetic_version")
    modImplementation("maven.modrinth:buzzier-bees:$buzzier_bees_version")

    // Recipe viewers
    modImplementation("maven.modrinth:emi:$emi_version+$minecraft_version+forge")
    modCompileOnly("maven.modrinth:jei:$jei_version-forge")

    // Farmer's Delight and its addons
    modImplementation("maven.modrinth:farmers-delight:$farmers_delight_version")
    modCompileOnly("curse.maven:brewin-and-chewin-637808:$brewin_and_chewin_version")
    modCompileOnly("maven.modrinth:cultural-delights:$cultural_delights_version")
    modCompileOnly("maven.modrinth:my-nethers-delight:$nethers_delight_version")

    // Create, its dependencies, and its dependents
    modCompileOnly("com.simibubi.create:create-$minecraft_version:$create_forge_version:slim") { transitive = false }
    modCompileOnly("com.tterrag.registrate:Registrate:$registrate_forge_version")
    modCompileOnly("com.jozufozu.flywheel:flywheel-forge-$minecraft_version:$flywheel_forge_version")

    // Optional dependencies for mods with only mixin fixes
    modImplementation("curse.maven:aquaculture-60028:$aquaculture_version")
    modCompileOnly("curse.maven:copper-tuff-backport-fabric-950738:$copper_backport_version")
//    modImplementation("curse.maven:copperized-567666:$copperized_version")
    modCompileOnly("software.bernie.geckolib:geckolib-forge-$geckolib_version")
    modImplementation("maven.modrinth:supplementaries:$supplementaries_version-forge")
    modImplementation("maven.modrinth:moonlight:$moonlight_lib_version-forge")
    modCompileOnly("maven.modrinth:naturalist:$naturalist_version")
//    modImplementation("maven.modrinth:another-furniture:$another_furniture_version")
    modCompileOnly("maven.modrinth:oreganized:$oreganized_version")
    modCompileOnly("maven.modrinth:spelunkery:$spelunkery_version-forge")
    modCompileOnly("maven.modrinth:sullysmod:$sullys_version")
    modCompileOnly("maven.modrinth:twigs:$twigs_version")
    modCompileOnly("maven.modrinth:quark:$quark_version")
    modCompileOnly("maven.modrinth:zeta:$zeta_version")
//    modImplementation("maven.modrinth:dynamiccrosshair:$dynamic_crosshair_version-forge")
    modCompileOnly("maven.modrinth:cofh-core:$cofh_core_version-forge")
    modCompileOnly("curse.maven:clash-468706:$clash_version")
    modCompileOnly("maven.modrinth:gliders:$gliders_version")
//    modRuntimeOnly("dev.kosmx.player-anim:player-animation-lib-forge:${player_anim_version}")
//    modRuntimeOnly("net.threetag:PalladiumCore-forge:${palladiumcore_version}")
    modCompileOnly("maven.modrinth:survivality:${survivality_version}")
    modImplementation("curse.maven:ecologics-570463:4857272")
    modImplementation("maven.modrinth:screenshot-viewer:${screenshot_viewer_version}")
    modImplementation("maven.modrinth:spyglass-improvements:${spyglass_improvements_version}")
    modRuntimeOnly("top.theillusivec4.curios:curios-forge:${curios_version}") // dependency of sypyglass improvements

    // mods for testing purposes
    modImplementation("curse.maven:map-atlases-forge-519759:6301932")
//    modImplementation("maven.modrinth:mmmmmmmmmmmm:1.7.2-forge")

    // beacons
//    modImplementation("curse.maven:just-enough-beacons-reforged-912266:$jeb_reforged_version")
//    modImplementation("curse.maven:cerbons-better-beacons-921066:$better_beacons_version")


    //1.20
    modImplementation "maven.modrinth:better-copper-armor-and-tools:1.2-1.20.1"

    // MixinSquared
    compileOnly(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-common:0.3.2-beta.4"))
    implementation(jarJar("com.github.bawnorton.mixinsquared:mixinsquared-forge:0.3.2-beta.4"))
    // MixinExtras
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.1"))
}

// Uncomment the lines below if you wish to configure mixin. The mixin file should be named modid.mixins.json.

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

dependencies {
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    manifest.attributes([
            "MixinConfigs": "${mod_id}.mixins.json"
    ])
}


// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version        : minecraft_version,
            forge_version            : forge_version,
            mod_id                   : mod_id,
            mod_version              : mod_version
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
legacyForge.ideSyncTask generateModMetadata

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
